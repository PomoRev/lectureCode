Welcome to Week 9

Note: this file will be augmented after the class.

1. USER/GROUP MANAGEMENT COMMANDS

adduser - adds a user with a script to capture all that juicy data

useradd - barebones, you need to set the switches for things like 
creating the user's home directory (-m), etc.

su  - switch user

su -  - switch user initialize their environment, including starting
in the new user's home folder.

whoami - returns the login for the current user. You can also
extract a user's name from the passwd file. 

chgrp - change the group ownership of a file (similar to chown and 
chmod)

newgrp - switches the current group of the current user, this 
allows them to create and manage files which have the new
group's ownership. This is for collaboration purposes. You leave 
the new group with the exit command.

groupadd - adds a new group to the system.

id - displays the current user's group (good to confirm you are 
doing your work from the correct group). 


2. UNIX SHELL ENVIRONMENT 

alias - lists all of the currently set aliases. The shell will 
do a direct replacement of any alias for the aliased data unless
you quote it. 

alias [name]=[replacement text]  - sets a new alias, note the
spacing. The rule of thumb is that if there is no space in an 
attribute it is a single attribute, otherwise spaces delimit
parameters in a command line.

Because an alias is directly replaced with the replacement text 
it can be combined with other attributes and commands.

unalias [alias name] - removes an alias from your environment. 
Aliases also die with your session, so if you close your bash 
shell you will lose any aliases you set from the command line.

env - displayes the environment variables (similar to export -f). env is also 
used to create an environment for running commands. In our context we are 
more concerned with using the informational aspect of the command. The man page 
will reveal more of its capabilities. 

$PATH - this is one of the environment variables. I chose this one because it 
is useful for knowing where the shell will look for programs (commands and applications)
to run. The variable is actually called PATH, using the $ symbol says to interpret the following
symbol, to show its value. The command echo $PATH will display the contents of PATH on
the screen (stdout). If you cannot run commands has this variable been changed?

In terms of environment variables and aliases, in order to have them persist beyond the
current instance of your shell you will need to add them to a script like .bashrc or .bash_profile 
in order to have them available in your BASH shell experience. (.bashrc runs whenever you open a 
terminal and .bash_profile is run once to set up future instances of the BASH shell for a user.)

In addition to variables (sometimes called system variables in other OSes, but here it is best
to think of them as SHELL variables) and aliases you can also export functions into the env 
(environment) using the export command.

To demonstrate this we used the following commmand to make a simple function:

hello () { echo “hello!”; }

Then we exported it into the environment with the command

export -f hello

This makes hello, the function, to be available throughout this instance of the BASH shell. We 
simply need to invoke the function using the exported name:

hello

We can list all the exported functions with 

export -f 

3. BASH SHELL SCRIPTING

See first.sh.

======

For those wishing to install VS Code, you can use the snap package installer using the command:

sudo snap install code --classic    

You should type this entire command as written to install VSCode in Linux (and your life 
will be much better). Note that the --classic mode of install drops some of the security measures
so that VS Code can be set up as it needs to be set up.   


